{"code":"import { __spreadArray } from \"tslib\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect, useState, useMemo } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, Polygon, LayersControl, ScaleControl, useMapEvents, } from 'react-leaflet';\nimport L from 'leaflet';\nimport { createLayerComponent } from '@react-leaflet/core';\nimport 'leaflet/dist/leaflet.css';\nimport maplibregl from 'maplibre-gl';\nimport '@maplibre/maplibre-gl-leaflet';\n// Fix default marker icons\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n    iconRetinaUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon-2x.png',\n    iconUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon.png',\n    shadowUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-shadow.png',\n});\nvar STADIA_API_KEY = 'b1eaa277-afbb-4968-b2de-a804eb44d959';\n// --- MapLibre wrapper ---\nvar createMapLibreLayer = function (props, context) {\n    var styleUrl = props.styleUrl, attribution = props.attribution, _a = props.interactive, interactive = _a === void 0 ? true : _a;\n    var layer = L.maplibreGL({\n        style: styleUrl,\n        attribution: attribution,\n        interactive: interactive,\n        maplibreOptions: { maplibregl: maplibregl },\n    });\n    return { instance: layer, context: context };\n};\nvar updateMapLibreLayer = function (instance, props, prevProps) {\n    var _a;\n    if (props.styleUrl !== prevProps.styleUrl) {\n        ;\n        (_a = instance.getMaplibreMap()) === null || _a === void 0 ? void 0 : _a.setStyle(props.styleUrl);\n    }\n    return null;\n};\nvar MapLibreLayer = createLayerComponent(createMapLibreLayer, updateMapLibreLayer);\n// Component for handling map clicks\nfunction AddMarkerOnClick(_a) {\n    var onAddMarker = _a.onAddMarker;\n    useMapEvents({\n        click: function (e) {\n            var caption = prompt('Enter a caption for this marker:');\n            if (caption && caption.trim() !== '') {\n                onAddMarker([e.latlng.lat, e.latlng.lng], caption.trim());\n            }\n        },\n    });\n    return null;\n}\nvar geojsonUrl = 'https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json';\n//export const StadiaGeoJSONMapRemote: React.FC<Props> = ({ label  }) => {\nexport default function StadiaGeoJSONMapRemote(_a) {\n    var geojsonUrl = _a.geojsonUrl;\n    var center = useMemo(function () { return [37.8, -96]; }, []);\n    var rasterUrl = \"https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png?api_key=\".concat(STADIA_API_KEY);\n    var attribution = \"&copy; <a href='https://stadiamaps.com/'>Stadia Maps</a>, &copy; <a href='https://openmaptiles.org/'>OpenMapTiles</a> &copy; <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors\";\n    var vectorStyle = \"https://tiles.stadiamaps.com/styles/alidade_smooth.json?api_key=\".concat(STADIA_API_KEY);\n    var _b = useState(null), geojsonData = _b[0], setGeojsonData = _b[1];\n    var _c = useState(true), loading = _c[0], setLoading = _c[1];\n    var _d = useState(null), error = _d[0], setError = _d[1];\n    var _e = useState([]), userMarkers = _e[0], setUserMarkers = _e[1];\n    useEffect(function () {\n        setLoading(true);\n        fetch(geojsonUrl)\n            .then(function (res) {\n            if (!res.ok)\n                throw new Error(\"HTTP \".concat(res.status));\n            return res.json();\n        })\n            .then(function (data) {\n            setGeojsonData(data);\n            setLoading(false);\n        })\n            .catch(function (err) {\n            setError(err.message);\n            setLoading(false);\n        });\n    }, [geojsonUrl]);\n    var handleAddMarker = function (coords, caption) {\n        setUserMarkers(function (prev) { return __spreadArray(__spreadArray([], prev, true), [{ coords: coords, caption: caption }], false); });\n    };\n    return (_jsxs(\"div\", { style: { width: '100%', height: '80vh' }, children: [loading && _jsx(\"div\", { children: \"Loading map data...\" }), error && _jsxs(\"div\", { style: { color: 'red' }, children: [\"Error: \", error] }), _jsxs(MapContainer, { center: center, zoom: 4, scrollWheelZoom: true, style: { height: '100%', width: '100%' }, children: [_jsx(ScaleControl, { position: \"bottomleft\" }), _jsx(AddMarkerOnClick, { onAddMarker: handleAddMarker }), _jsxs(LayersControl, { position: \"topright\", children: [_jsx(LayersControl.BaseLayer, { checked: true, name: \"Stadia Raster\", children: _jsx(TileLayer, { url: rasterUrl, attribution: attribution }) }), _jsx(LayersControl.BaseLayer, { name: \"Stadia Vector (MapLibre)\", children: _jsx(MapLibreLayer, { styleUrl: vectorStyle, attribution: attribution }) }), _jsx(LayersControl.Overlay, { checked: true, name: \"User Markers\", children: _jsx(\"div\", { children: userMarkers.map(function (m, i) { return (_jsx(Marker, { position: m.coords, children: _jsxs(Popup, { children: [_jsx(\"b\", { children: m.caption }), _jsx(\"br\", {}), m.coords[0].toFixed(4), \", \", m.coords[1].toFixed(4)] }) }, i)); }) }) }), (geojsonData === null || geojsonData === void 0 ? void 0 : geojsonData.features) && (_jsx(LayersControl.Overlay, { checked: true, name: \"GeoJSON Polygons\", children: _jsx(\"div\", { children: geojsonData.features\n                                        .filter(function (f) { return f.geometry.type === 'Polygon'; })\n                                        .map(function (f, i) { return (_jsx(Polygon, { positions: f.geometry.coordinates.map(function (ring) {\n                                            return ring.map(function (c) { return [c[1], c[0]]; });\n                                        }) }, i)); }) }) }))] })] })] }));\n}\n","references":["/home/sanjeev/Documents/REACTSTUFF/stadia-tile-map/node_modules/@types/react/index.d.ts","/home/sanjeev/Documents/REACTSTUFF/stadia-tile-map/node_modules/react-leaflet/lib/index.d.ts","/home/sanjeev/Documents/REACTSTUFF/stadia-tile-map/node_modules/@types/leaflet/index.d.ts","/home/sanjeev/Documents/REACTSTUFF/stadia-tile-map/node_modules/@react-leaflet/core/lib/index.d.ts","/home/sanjeev/Documents/REACTSTUFF/stadia-tile-map/node_modules/maplibre-gl/dist/maplibre-gl.d.ts","/home/sanjeev/Documents/REACTSTUFF/stadia-tile-map/node_modules/@maplibre/maplibre-gl-leaflet/leaflet-maplibre-gl.d.ts"],"dts":{"name":"/home/sanjeev/Documents/REACTSTUFF/stadia-tile-map/node_modules/.cache/rollup-plugin-typescript2/placeholder/StadiaGeoJSONMapRemote.d.ts","writeByteOrderMark":false,"text":"import 'leaflet/dist/leaflet.css';\nimport '@maplibre/maplibre-gl-leaflet';\nexport default function StadiaGeoJSONMapRemote({ geojsonUrl }: {\n    geojsonUrl: any;\n}): import(\"react/jsx-runtime\").JSX.Element;\n"}}
